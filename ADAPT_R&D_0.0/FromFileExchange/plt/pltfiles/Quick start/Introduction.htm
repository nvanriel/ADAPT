<html>
<head>
<title>Introduction</title>
<style>
<!--
span.mcode   {
	color: #E00000;
	text-align: left;
	font-weight: bold;
}
h2           { font-size: 22pt }
-->
</style>
</head>

<body>

<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" id="AutoNumber1" height="86">
  <tr>
    <td height="86" style="width: 33%">
    <h2>Introduction</h2>
    </td>
    <td width="30%" height="86"><p align="right"><font face="Arial" size="2">Copyright (c) 2014, Paul 
      Mennen</font></p>
    <p>&nbsp;</td>
    <td width="27%" height="86">
    <img border="0" src="../images/plt.png" width="214" height="98" align="right"></td>
  </tr>
</table>
<p style="MARGIN-BOTTOM: -10px"> 
<span class="mcode">plt</span> provides a framework for developing graphical 
user interfaces that include 2D plotting. (Most Matlab GUIs probably fall into 
this category). The important pieces of this framework are:</p>
<ul>
<li>A plotting interface that is an alternative to Matlab's	<span class="mcode">plot</span> and <span class="mcode">plotyy</span> routines</li>
<li>Several pseudo objects (collections of Matlab graphical objects with a single purpose)</li>
<li>A methodology for combining these elements presented with a series of examples 
&amp; demo programs.</li>
</ul>
Like plot, plt 
commands can be typed at the command prompt to display your workspace arrays, 
and for simple commands the interface is the same. However the similarities end 
with the optional parameters. Perhaps the most significant advantage of plt over 
plot is the consistency and flexibility of the command line interface, all  
explained in a single document with example code for every important option. 
Never again will you have to hunt for the many obscure handle graphics commands 
scattered throughout the Matlab documentation.&nbsp;Other advantages of plt over 
plot include:
<ul>
    <li>Optimized for data exploration</li>
	<li>Improved zooming, panning,&nbsp;linear/log toggling, &amp; auto-scaling controls</li>
	<li>You can interactively select which variables to plot (i.e. workspace 
	plotting)</li>
	<li>Automatically generates a legend that includes trace selection controls</li>
	<li>Fast and easy cursor movement with delta, rms, mean, y/x, and magnitude 
	readouts.</li>
	<li>Support for dual y-axes and sub-plots, each with individual cursor 
	control &amp; readout.</li>
	<li>Peak/Valley finder, display expansion history, and support for metric 
	prefixes</li>
	<li>Better looking grid lines with selectable color</li>
	<li>Interactive editing of trace properties, figure colors, and annotations</li>
	<li>Up to 99 traces on a single axis (even more if a legend isn't needed)</li>
	<li>Data editing (both mouse and keyboard driven)</li>
	<li>Provides these pseudo objects: slider, popup, edit, color 
  picker, cursor, grid</li>
	<li>Regular updates based on user suggestions (with easy email access to the 
	author)</li>
</ul>

<p> 
<span class="mcode">plt.m</span> and all example code has been extensively 
tested and verified to run under all Matlab releases from 12.1 (ver 6.1) to R2012b using Windows 7, 
Vista, and Windows XP. Brief testing has also been done under Unix based platforms (including the Mac).</p>

<p>I hope using plt enhances your Matlab experience. Please let me know about 
any problems or suggestions you have relating to plt. You can reach me at
<a href="mailto:paul@mennen.org">paul@mennen.org</a>.</p>

</body>

</html>